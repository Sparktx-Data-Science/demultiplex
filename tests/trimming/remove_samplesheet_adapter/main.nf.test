nextflow_pipeline {

    name "Trimming - Remove Adapter"
    script "../../../main.nf"
    profile "test"
    tag "remove_samplesheet_adapter"
    tag "pipeline"

    test("User wants to skip trimming with the demultiplexer, and trim with fastp") {
        when {
            params {
                input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_samplesheet.csv"
                outdir        = "$outputDir"
                skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
                // NOTE: This is the default behavior, so we don't need to set these params but leaving them here for clarity
                // remove_samplesheet_adapter = true
                // trim_fastq    = true
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path
                ).match() },
                // TODO: Check that generated samplesheet has no adapter lines
                // TODO: Check for fastp execution and outputs
            )
        }
    }
    test("User wants to trim with the demultiplexer") {
        when {
            params {
                input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_samplesheet.csv"
                outdir        = "$outputDir"
                skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
                remove_samplesheet_adapter = false
                trim_fastq = false
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path
                ).match() },
                // TODO: Check that fastp was NOT executed
            )
        }
    }

    test("User wants to skip trimming all together") {
        when {
            params {
                input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_samplesheet.csv"
                outdir        = "$outputDir"
                skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
                remove_samplesheet_adapter = true
                trim_fastq = false
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path
                ).match() },
                // TODO: Check that fastp was NOT executed
                // TODO: Check that generated samplesheet has no adapter lines
                // TODO: Check that fastp was NOT executed
            )
        }
    }

    // TODO: When would someone want to run this? Should this fail?
    // test("User wants to trim with the demultiplexer, and trim with fastp") {
    // }
}
