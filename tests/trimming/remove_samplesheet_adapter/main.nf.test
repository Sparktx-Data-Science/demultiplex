nextflow_pipeline {

    name "Trimming - Remove Adapter"
    script "../../../main.nf"
    profile "test"
    tag "remove_samplesheet_adapter"
    tag "pipeline"

    test("User wants to skip trimming with the demultiplexer, and trim with fastp") {
        when {
            params {
                input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_samplesheet.csv"
                outdir        = "$outputDir"
                skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
                // NOTE: This is the default behavior, so we don't need to set these params but leaving them here for clarity
                // remove_samplesheet_adapter = true
                // trim_fastq    = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                // Check that generated samplesheet has no adapter lines
                {
                    def samplesheetFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('_no_adapters.csv') }
                    assert samplesheetFiles.size() > 0
                    def adapterlinesFound = false
                    samplesheetFiles.each { file ->
                        def content = file.text
                        if (content.contains('AdapterRead1') || content.contains('AdapterRead2') ||
                            content.contains('Adapter,AGATCGGAAGAG')) {
                            adapterlinesFound = true
                        }
                    }
                    assert !adapterlinesFound
                },
                // Check for fastp execution and outputs
                {
                    // Verify fastp was executed by checking for task execution
                    def trace = workflow.trace
                    def fastpTaskFound = false
                    trace.tasks().each { task ->
                        if (task.name?.contains('FASTP') || task.process?.contains('FASTP')) {
                            fastpTaskFound = true
                            assert task.status == 'COMPLETED', "FASTP task did not complete successfully"
                        }
                    }
                    assert fastpTaskFound, "No FASTP task was found in the workflow"

                    // Check for fastp output files
                    def fastpJsonFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('.fastp.json') }
                    assert fastpJsonFiles.size() > 0, "No fastp JSON report files were found"

                    def fastpHtmlFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('.fastp.html') }
                    assert fastpHtmlFiles.size() > 0, "No fastp HTML report files were found"

                    // Check for trimmed fastq files since trim_fastq defaults to true
                    def trimmedFastqFiles = file("$outputDir").listFiles().findAll { it.name.contains('.fastp.fastq.gz') }
                    assert trimmedFastqFiles.size() > 0, "No trimmed fastq files were found with trim_fastq=true"

                    // Check content of JSON report to verify trimming happened
                    def jsonContentChecked = false
                    fastpJsonFiles.each { jsonFile ->
                        def jsonContent = jsonFile.text
                        assert jsonContent.contains('"adapter_trimmed"'), "Adapter trimming section not found in fastp JSON report"
                        // Check that adapters were actually trimmed by verifying adapter trimming stats exist
                        assert jsonContent.contains('"total_bases":'), "Total bases statistics not found in fastp report"
                        jsonContentChecked = true
                    }
                    assert jsonContentChecked, "No fastp JSON files were checked for adapter trimming content"
                }
            )
        }
    }
    test("User wants to trim with the demultiplexer") {
        when {
            params {
                input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_samplesheet.csv"
                outdir        = "$outputDir"
                skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
                remove_samplesheet_adapter = false
                trim_fastq = false
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                // Check that generated samplesheet has no adapter lines
                {
                    def samplesheetFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('_no_adapters.csv') }
                    assert samplesheetFiles.size() > 0
                    def adapterlinesFound = false
                    samplesheetFiles.each { file ->
                        def content = file.text
                        if (content.contains('AdapterRead1') || content.contains('AdapterRead2') ||
                            content.contains('Adapter,AGATCGGAAGAG')) {
                            adapterlinesFound = true
                        }
                    }
                    assert !adapterlinesFound
                },
                // Check for fastp execution and reports but no trimmed files
                {
                    // Verify fastp was executed for QC purposes
                    def trace = workflow.trace
                    def fastpTaskFound = false
                    trace.tasks().each { task ->
                        if (task.name?.contains('FASTP') || task.process?.contains('FASTP')) {
                            fastpTaskFound = true
                            assert task.status == 'COMPLETED', "FASTP task did not complete successfully"
                        }
                    }
                    assert fastpTaskFound, "No FASTP task was found in the workflow"

                    // Check for fastp report files
                    def fastpJsonFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('.fastp.json') }
                    assert fastpJsonFiles.size() > 0, "No fastp JSON report files were found"

                    def fastpHtmlFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('.fastp.html') }
                    assert fastpHtmlFiles.size() > 0, "No fastp HTML report files were found"

                    // Check that no trimmed fastq files were generated since trim_fastq=false
                    def trimmedFastqFiles = file("$outputDir").listFiles().findAll { it.name.contains('.fastp.fastq.gz') }
                    assert trimmedFastqFiles.size() == 0, "Trimmed fastq files were found despite trim_fastq=false"

                    // Check content of JSON report to verify fastp ran
                    def jsonContentChecked = false
                    fastpJsonFiles.each { jsonFile ->
                        def jsonContent = jsonFile.text
                        assert jsonContent.contains('"summary"'), "Summary section not found in fastp JSON report"
                        jsonContentChecked = true
                    }
                    assert jsonContentChecked, "No fastp JSON files were checked for content"
                }
            )
        }
    }

    test("User wants to skip trimming all together") {
        when {
            params {
                input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_samplesheet.csv"
                outdir        = "$outputDir"
                skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
                remove_samplesheet_adapter = false
                trim_fastq = false
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                // Check that generated samplesheet has no adapter lines
                {
                    def samplesheetFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('_no_adapters.csv') }
                    assert samplesheetFiles.size() > 0, "No samplesheet files ending with '_no_adapters.csv' were found"
                    def adapterlinesFound = false
                    samplesheetFiles.each { file ->
                        def content = file.text
                        if (content.contains('AdapterRead1') || content.contains('AdapterRead2') ||
                            content.contains('Adapter,AGATCGGAAGAG')) {
                            adapterlinesFound = true
                        }
                    }
                    assert !adapterlinesFound
                },
                // Check that fastp runs but doesn't produce trimmed files
                {
                    // Verify fastp was executed for QC purposes
                    def trace = workflow.trace
                    def fastpTaskFound = false
                    trace.tasks().each { task ->
                        if (task.name?.contains('FASTP') || task.process?.contains('FASTP')) {
                            fastpTaskFound = true
                            assert task.status == 'COMPLETED', "FASTP task did not complete successfully"
                        }
                    }
                    assert fastpTaskFound, "No FASTP task was found in the workflow"

                    // Check for fastp report files
                    def fastpJsonFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('.fastp.json') }
                    assert fastpJsonFiles.size() > 0, "No fastp JSON report files were found"

                    def fastpHtmlFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('.fastp.html') }
                    assert fastpHtmlFiles.size() > 0, "No fastp HTML report files were found"

                    // Check that no trimmed fastq files were generated since trim_fastq=false
                    def trimmedFastqFiles = file("$outputDir").listFiles().findAll { it.name.contains('.fastp.fastq.gz') }
                    assert trimmedFastqFiles.size() == 0, "Trimmed fastq files were found despite trim_fastq=false"
                }
            )
        }
    }

    // TODO: When would someone want to run this? Should this fail?
    // test("User wants to trim with the demultiplexer, and trim with fastp") {
    // }
}
