nextflow_pipeline {

    name "Trimming - Remove Adapter"
    script "../../../main.nf"
    profile "test"
    tag "remove_samplesheet_adapter"
    tag "pipeline"

    test("remove_samplesheet_adapter and trim_fastq") {

        when {
            params {
                input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_with_adapters.csv"
                outdir        = "$outputDir"
                demultiplexer = 'bclconvert'
                skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
                remove_samplesheet_adapter = true
                trim_fastq    = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                // Check that generated samplesheet has no adapter lines
                {
                    def samplesheetFiles = file("$outputDir").listFiles().findAll { it.name.endsWith('_no_adapters.csv') }
                    assert samplesheetFiles.size() > 0
                    def adapterlinesFound = false
                    samplesheetFiles.each { file ->
                        def content = file.text
                        if (content.contains('AdapterRead1') || content.contains('AdapterRead2') ||
                            content.contains('Adapter,AGATCGGAAGAG')) {
                            adapterlinesFound = true
                        }
                    }
                    assert !adapterlinesFound
                }
            )
        }
    }

    // TODO: When would someone want to run this? Should this fail?
    // test("remove_samplesheet_adapter = false and trim_fastq = true") {
    //     when {
    //         params {
    //             input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_with_adapters.csv"
    //             outdir        = "$outputDir"
    //             demultiplexer = 'bclconvert'
    //             skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
    //             remove_samplesheet_adapter = false
    //             trim_fastq    = true
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert workflow.success }
    //             // When remove_samplesheet_adapter = false, we should NOT have *_no_adapters.csv files
    //         )
    //     }
    // }


    test("User ") {
        when {
            params {
                input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_with_adapters.csv"
                outdir        = "$outputDir"
                demultiplexer = 'bclconvert'
                skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
                remove_samplesheet_adapter = true
                trim_fastq    = false
            }
        }

        then {
            assertAll(
                { assert workflow.success }
                // No need to check for fastp files in this test as it's already done in the first test
            )
        }
    }

    // Additional test for when the samplesheet has no adapter lines
    test("remove_samplesheet_adapter = true with no adapters in samplesheet") {
        when {
            params {
                // Use the input samplesheet that points to no_adapters.csv
                input         = "${projectDir}/tests/trimming/remove_samplesheet_adapter/samplesheets/input_no_adapters.csv"
                outdir        = "$outputDir"
                demultiplexer = 'bclconvert'
                skip_tools = 'samshee,falco' // Skip samshee validation which fails on our test samplesheets
                remove_samplesheet_adapter = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                // Check for the warning message in stdout or log
                {
                    // The warning can be in any of the log files
                    def logFiles = [
                        file("${launchDir}/.nextflow.log"),
                        file("${outputDir}/pipeline_info/execution_trace.txt"),
                        file("$outputDir/.nextflow.log")
                    ]

                    def warningFound = false
                    logFiles.each { logFile ->
                        if (logFile.exists()) {
                            def logContent = logFile.text
                            if (logContent.contains("no adapters were found in samplesheet")) {
                                warningFound = true
                            }
                        }
                    }

                    // Also check stdout captured by nf-test
                    if (workflow.stdout.contains("no adapters were found in samplesheet")) {
                        warningFound = true
                    }

                    assert warningFound, "Warning message about no adapters not found in logs"
                }
            )
        }
    }
}
